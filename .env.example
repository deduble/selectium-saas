# =============================================================================
# Selextract Cloud Environment Configuration Template
# =============================================================================
#
# INSTRUCTIONS:
# 1. Copy this file to .env for development
# 2. Replace all placeholder values with actual credentials
# 3. Never commit .env files with real credentials to version control
# 4. Use strong, randomly generated passwords (32+ characters minimum)
# 5. For production, use secure credential management systems
#
# SECURITY REQUIREMENTS:
# - Generate unique passwords for each environment
# - Use environment-specific API keys and secrets
# - Rotate credentials regularly (every 90 days minimum)
# - Store production credentials securely outside version control
#
# =============================================================================

# =============================================================================
# DOCKER COMPOSE PROJECT CONFIGURATION
# =============================================================================
# Project name for Docker containers - standardizes naming
COMPOSE_PROJECT_NAME=selectium-saas

# =============================================================================
# ENVIRONMENT SETTINGS
# =============================================================================
# Environment type: development, staging, production
SELEXTRACT_ENVIRONMENT=development
# Enable debug mode (true for development, false for production)
SELEXTRACT_DEBUG=true
# Logging level: DEBUG, INFO, WARNING, ERROR, CRITICAL
SELEXTRACT_LOG_LEVEL=INFO

# =============================================================================
# AUTHENTICATION & SECURITY
# =============================================================================
# JWT Configuration - CRITICAL: Use strong, unique secrets
# Generate with: openssl rand -hex 32
SELEXTRACT_JWT_SECRET_KEY=your-super-secret-jwt-key-replace-with-64-char-random-string
# JWT signing algorithm (recommended: HS256)
SELEXTRACT_JWT_ALGORITHM=HS256
# Token expiration time in minutes
SELEXTRACT_ACCESS_TOKEN_EXPIRE_MINUTES=30

# API Secret Key - CRITICAL: Use strong, unique secret
# Generate with: openssl rand -hex 32
SELEXTRACT_API_SECRET_KEY=your-api-secret-key-replace-with-64-char-random-string

# =============================================================================
# DATABASE CONFIGURATION
# =============================================================================
# PostgreSQL connection settings
SELEXTRACT_DB_HOST=postgres
SELEXTRACT_DB_PORT=5432
SELEXTRACT_DB_NAME=selextract
SELEXTRACT_DB_USER=selextract
# CRITICAL: Use strong password (32+ characters)
# Generate with: openssl rand -base64 32
SELEXTRACT_DB_PASSWORD=your-strong-database-password-replace-with-secure-value

# Legacy variables (maintained for backward compatibility - will be deprecated)
POSTGRES_DB=selextract
POSTGRES_USER=selextract
POSTGRES_PASSWORD=your-strong-database-password-replace-with-secure-value
DATABASE_URL=postgresql://selextract:your-strong-database-password-replace-with-secure-value@postgres:5432/selextract

# =============================================================================
# REDIS CONFIGURATION
# =============================================================================
# Redis connection settings
SELEXTRACT_REDIS_HOST=redis
SELEXTRACT_REDIS_PORT=6379
# CRITICAL: Use strong password (32+ characters)
# Generate with: openssl rand -base64 32
SELEXTRACT_REDIS_PASSWORD=your-strong-redis-password-replace-with-secure-value
SELEXTRACT_REDIS_DB=0

# Legacy variables (maintained for backward compatibility - will be deprecated)
REDIS_PASSWORD=your-strong-redis-password-replace-with-secure-value
REDIS_URL=redis://:your-strong-redis-password-replace-with-secure-value@redis:6379/0
REDIS_HOST=redis
REDIS_PORT=6379
REDIS_DB=0

# =============================================================================
# OAUTH PROVIDERS
# =============================================================================
# Google OAuth Configuration
# Get credentials from: https://console.developers.google.com/
# REQUIRED: Replace with actual Google OAuth credentials
SELEXTRACT_GOOGLE_CLIENT_ID=your-google-client-id.apps.googleusercontent.com
SELEXTRACT_GOOGLE_CLIENT_SECRET=your-google-client-secret-from-console
SELEXTRACT_GOOGLE_REDIRECT_URI=http://localhost:8000/api/auth/google/callback

# Legacy variables (maintained for backward compatibility - will be deprecated)
GOOGLE_CLIENT_ID=your-google-client-id.apps.googleusercontent.com
GOOGLE_CLIENT_SECRET=your-google-client-secret-from-console
GOOGLE_REDIRECT_URI=http://localhost:8000/api/auth/google/callback

# GitHub OAuth Configuration (Optional)
# Get credentials from: https://github.com/settings/applications/new
SELEXTRACT_GITHUB_CLIENT_ID=your-github-client-id-from-github-apps
SELEXTRACT_GITHUB_CLIENT_SECRET=your-github-client-secret-from-github-apps
GITHUB_CLIENT_ID=your-github-client-id-from-github-apps
GITHUB_CLIENT_SECRET=your-github-client-secret-from-github-apps

# =============================================================================
# EXTERNAL SERVICES
# =============================================================================
# Webshare.io Proxy Service (REQUIRED for web scraping)
# Get API key from: https://www.webshare.io/dashboard
SELEXTRACT_WEBSHARE_API_KEY=your-webshare-api-key-from-dashboard

# Lemon Squeezy Billing Configuration (REQUIRED for payments)
# Get credentials from: https://app.lemonsqueezy.com/settings/api
# IMPORTANT: Use the API key from your Lemon Squeezy dashboard
SELEXTRACT_LEMONSQUEEZY_API_KEY=your-lemonsqueezy-api-key-from-dashboard
SELEXTRACT_LEMONSQUEEZY_STORE_ID=your-store-id-from-lemonsqueezy-dashboard
SELEXTRACT_LEMONSQUEEZY_WEBHOOK_SECRET=your-webhook-signing-secret-from-lemonsqueezy
SELEXTRACT_LEMONSQUEEZY_BASE_URL=https://api.lemonsqueezy.com/v1
SELEXTRACT_LEMONSQUEEZY_WEBHOOK_URL=https://yourdomain.com/api/v1/billing/webhooks/lemon-squeezy

# Legacy variables (maintained for backward compatibility - will be deprecated)
WEBSHARE_API_KEY=your-webshare-api-key-from-dashboard
LEMON_SQUEEZY_API_KEY=your-lemonsqueezy-api-key-from-dashboard
LEMON_SQUEEZY_STORE_ID=your-store-id-from-lemonsqueezy-dashboard
LEMON_SQUEEZY_WEBHOOK_SECRET=your-webhook-signing-secret-from-lemonsqueezy
LEMON_SQUEEZY_BASE_URL=https://api.lemonsqueezy.com/v1
LEMON_SQUEEZY_WEBHOOK_URL=https://yourdomain.com/api/v1/billing/webhooks/lemon-squeezy

# Lemon Squeezy Product Variant IDs
# Get from Lemon Squeezy dashboard after creating products
# REQUIRED: Replace with actual variant IDs from your Lemon Squeezy store
SELEXTRACT_LEMONSQUEEZY_STARTER_VARIANT_ID=12345-starter-plan-variant-id
SELEXTRACT_LEMONSQUEEZY_PROFESSIONAL_VARIANT_ID=12346-professional-plan-variant-id
SELEXTRACT_LEMONSQUEEZY_ENTERPRISE_VARIANT_ID=12347-enterprise-plan-variant-id

# Legacy variables (maintained for backward compatibility - will be deprecated)
LEMON_SQUEEZY_STARTER_VARIANT_ID=12345-starter-plan-variant-id
LEMON_SQUEEZY_PROFESSIONAL_VARIANT_ID=12346-professional-plan-variant-id
LEMON_SQUEEZY_ENTERPRISE_VARIANT_ID=12347-enterprise-plan-variant-id

# Lemon Squeezy Test Mode Configuration
# Set to 'development' for test mode, 'production' for live payments
ENVIRONMENT=development

# Lemon Squeezy Subscription Status Configuration
# Valid statuses: on_trial, active, paused, past_due, unpaid, cancelled, expired
# These are handled automatically by the webhook system

# Optional API Keys (not required for basic functionality)
OPENAI_API_KEY=your-openai-api-key-if-using-ai-features
STRIPE_API_KEY=your-stripe-api-key-if-using-stripe-instead-of-lemonsqueezy

# =============================================================================
# APPLICATION URLS
# =============================================================================
# Application URLs (update for your deployment)
SELEXTRACT_API_URL=http://localhost:8000
SELEXTRACT_FRONTEND_URL=http://localhost:3000
SELEXTRACT_ALLOWED_ORIGINS=http://localhost:3000,http://localhost:3001

# Legacy variables (maintained for backward compatibility - will be deprecated)
API_URL=http://localhost:8000
FRONTEND_URL=http://localhost:3000
ALLOWED_ORIGINS=http://localhost:3000,http://localhost:3001

# Frontend Environment Variables (exposed to client-side code)
NEXT_PUBLIC_API_URL=http://localhost:8000
NEXT_PUBLIC_APP_URL=http://localhost:3000
NEXT_PUBLIC_GOOGLE_CLIENT_ID=your-google-client-id.apps.googleusercontent.com

# =============================================================================
# BILLING CONFIGURATION
# =============================================================================
# Billing settings
BILLING_CURRENCY=USD
BILLING_TAX_RATE=0.0
BILLING_TRIAL_PERIOD_DAYS=0
COMPUTE_UNITS_OVERAGE_RATE_CENTS=5
MAX_COMPUTE_UNITS_OVERAGE_PERCENT=50

# =============================================================================
# MONITORING CONFIGURATION
# =============================================================================
# Grafana admin credentials
GRAFANA_ADMIN_USER=admin
# CRITICAL: Use strong password for Grafana
# Generate with: openssl rand -base64 32
GRAFANA_ADMIN_PASSWORD=your-strong-grafana-password-replace-with-secure-value

# SMTP Configuration for Email Alerts
# Configure your email provider settings
SMTP_PASSWORD=your-email-password-for-sending-alerts
ADMIN_EMAIL=admin@yourcompany.com
BUSINESS_EMAIL=business@yourcompany.com

# Alertmanager Webhook Authentication
# CRITICAL: Use strong password for webhook security
# Generate with: openssl rand -base64 32
ALERTMANAGER_WEBHOOK_PASSWORD=your-strong-webhook-password-replace-with-secure-value

# Slack Integration (Optional)
# Get webhook URL from: https://api.slack.com/messaging/webhooks
SLACK_WEBHOOK_URL=https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK

# =============================================================================
# LEGACY COMPATIBILITY VARIABLES
# =============================================================================
# These maintain backward compatibility during the transition period
SECRET_KEY=your-api-secret-key-replace-with-64-char-random-string

# =============================================================================
# ENVIRONMENT SETUP INSTRUCTIONS
# =============================================================================
#
# DEVELOPMENT SETUP:
# 1. Copy this file to .env: cp .env.example .env
# 2. Replace placeholder values with development credentials
# 3. For OAuth, create Google/GitHub apps and use real client IDs/secrets
# 4. For external services, sign up and get API keys
# 5. Use simple passwords for local development (but still secure)
#
# PRODUCTION SETUP:
# 1. Use secure credential management (AWS Secrets Manager, HashiCorp Vault, etc.)
# 2. Generate strong, unique passwords for all services
# 3. Use production-grade external service accounts
# 4. Enable SSL/TLS and use HTTPS URLs
# 5. Set up proper backup and monitoring systems
# 6. Configure firewall and security groups
# 7. Enable log aggregation and alerting
#
# CREDENTIAL GENERATION COMMANDS:
# JWT Secret: openssl rand -hex 32
# Database Password: openssl rand -base64 32 | tr -d "=+/" | cut -c1-32
# Redis Password: openssl rand -base64 32 | tr -d "=+/" | cut -c1-32
# API Secret: openssl rand -hex 32
# Webhook Password: openssl rand -base64 32 | tr -d "=+/" | cut -c1-32
#
# SECURITY CHECKLIST:
# [ ] All placeholder values replaced with actual credentials
# [ ] Strong passwords generated (32+ characters)
# [ ] OAuth applications configured with correct redirect URIs
# [ ] External service API keys obtained and tested
# [ ] Production URLs updated for deployment
# [ ] .env file permissions set to 600 (chmod 600 .env)
# [ ] .env file not committed to version control
# [ ] Backup strategy implemented for credential recovery
# [ ] Credential rotation schedule established
#
# =============================================================================