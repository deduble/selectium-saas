# Redis Performance Configuration for Selextract Cloud
# Optimized for high-throughput caching and task queue operations

# Network and connection settings
bind 0.0.0.0
port 6379
tcp-backlog 511
timeout 300
tcp-keepalive 300
protected-mode no

# General settings
daemonize no
supervised no
pidfile /var/run/redis_6379.pid
loglevel notice
logfile ""
databases 16

# Snapshotting and persistence
save 900 1
save 300 10
save 60 10000
stop-writes-on-bgsave-error yes
rdbcompression yes
rdbchecksum yes
dbfilename dump.rdb
dir ./

# Replication settings
replica-serve-stale-data yes
replica-read-only yes
repl-diskless-sync no
repl-diskless-sync-delay 5
repl-ping-replica-period 10
repl-timeout 60
repl-disable-tcp-nodelay no
repl-backlog-size 1mb
repl-backlog-ttl 3600
replica-priority 100

# Security
requirepass ${REDIS_PASSWORD}
rename-command FLUSHDB ""
rename-command FLUSHALL ""
rename-command DEBUG ""
rename-command CONFIG "CONFIG_9a8b7c6d5e4f3a2b1c0d9e8f7a6b5c4d"

# Memory management
maxmemory 1gb
maxmemory-policy allkeys-lru
maxmemory-samples 5

# Lazy freeing (non-blocking deletion)
lazyfree-lazy-eviction yes
lazyfree-lazy-expire yes
lazyfree-lazy-server-del yes
replica-lazy-flush yes

# Threaded I/O (Redis 6+)
io-threads 4
io-threads-do-reads yes

# Append Only File (AOF) persistence
appendonly yes
appendfilename "appendonly.aof"
appendfsync everysec
no-appendfsync-on-rewrite no
auto-aof-rewrite-percentage 100
auto-aof-rewrite-min-size 64mb
aof-load-truncated yes
aof-use-rdb-preamble yes

# Lua scripting
lua-time-limit 5000

# Slow log
slowlog-log-slower-than 10000
slowlog-max-len 128

# Latency monitoring
latency-monitor-threshold 100

# Event notification
notify-keyspace-events ""

# Advanced config
hash-max-ziplist-entries 512
hash-max-ziplist-value 64
list-max-ziplist-size -2
list-compress-depth 0
set-max-intset-entries 512
zset-max-ziplist-entries 128
zset-max-ziplist-value 64
hll-sparse-max-bytes 3000
stream-node-max-bytes 4096
stream-node-max-entries 100

# Active rehashing
activerehashing yes

# Client output buffer limits
client-output-buffer-limit normal 0 0 0
client-output-buffer-limit replica 256mb 64mb 60
client-output-buffer-limit pubsub 32mb 8mb 60

# Client query buffer limit
client-query-buffer-limit 1gb

# Protocol max bulk length
proto-max-bulk-len 512mb

# Frequency of background tasks
hz 10

# Dynamic HZ
dynamic-hz yes

# AOF rewrite settings
aof-rewrite-incremental-fsync yes

# RDB settings
rdb-save-incremental-fsync yes

# LFU settings (for maxmemory-policy allkeys-lfu)
lfu-log-factor 10
lfu-decay-time 1

# Performance optimizations for Celery/task queue usage
# These settings are optimized for the typical patterns in Selextract Cloud:
# - High-frequency task enqueueing/dequeueing
# - Session storage for authentication
# - Caching of API responses
# - Real-time features and WebSocket connections

# Connection and network optimizations
tcp-keepalive 300
timeout 300

# Memory optimization for task queue workloads
# Tasks are typically small JSON objects, optimize for this pattern
hash-max-ziplist-entries 512
hash-max-ziplist-value 64

# List optimization for Celery queues
list-max-ziplist-size -2
list-compress-depth 0

# Set optimization for task tracking
set-max-intset-entries 512

# Sorted set optimization for task priorities/delays
zset-max-ziplist-entries 128
zset-max-ziplist-value 64

# Background operations frequency
hz 10

# Memory management for high-throughput scenarios
maxmemory-samples 5

# AOF settings for data durability in production
appendfsync everysec
no-appendfsync-on-rewrite no

# Auto AOF rewrite to manage file size
auto-aof-rewrite-percentage 100
auto-aof-rewrite-min-size 64mb

# Client connection settings
# Optimized for multiple API servers and workers
client-output-buffer-limit normal 0 0 0
client-output-buffer-limit replica 256mb 64mb 60
client-output-buffer-limit pubsub 32mb 8mb 60

# Slow log for monitoring performance
slowlog-log-slower-than 10000
slowlog-max-len 128

# Latency monitoring
latency-monitor-threshold 100

# Additional performance settings for Redis 6+
# Enable I/O threading for better performance
io-threads 4
io-threads-do-reads yes

# Lazy freeing for non-blocking operations
lazyfree-lazy-eviction yes
lazyfree-lazy-expire yes
lazyfree-lazy-server-del yes
replica-lazy-flush yes

# Disable potentially dangerous commands in production
rename-command SHUTDOWN SHUTDOWN_9a8b7c6d5e4f3a2b1c0d9e8f7a6b5c4d
rename-command SAVE SAVE_9a8b7c6d5e4f3a2b1c0d9e8f7a6b5c4d
rename-command BGSAVE BGSAVE_9a8b7c6d5e4f3a2b1c0d9e8f7a6b5c4d

# Module loading (if using Redis modules)
# loadmodule /path/to/module.so

# Redis Sentinel settings (for high availability)
# sentinel announce-ip 192.168.1.100
# sentinel announce-port 26379

# Redis Cluster settings (for horizontal scaling)
# cluster-enabled yes
# cluster-config-file nodes-6379.conf
# cluster-node-timeout 15000
# cluster-replica-validity-factor 10
# cluster-migration-barrier 1
# cluster-require-full-coverage yes

# ACL settings (Redis 6+ - Access Control Lists)
# user default on nopass ~* &* -@all +@read +@write +@connection +@transaction
# user worker on >${REDIS_WORKER_PASSWORD} ~celery* ~_kombu* ~unacked* +@all
# user api on >${REDIS_API_PASSWORD} ~session:* ~cache:* +@read +@write +@connection

# TLS settings (if using encrypted connections)
# tls-port 6380
# tls-cert-file redis.crt
# tls-key-file redis.key
# tls-ca-cert-file ca.crt
# tls-protocols "TLSv1.2 TLSv1.3"
# tls-ciphers "ECDHE+AESGCM:ECDHE+CHACHA20:DHE+AESGCM:DHE+CHACHA20:!aNULL:!MD5:!DSS"

# Performance monitoring and debugging
# Enable these for performance analysis
# latency-tracking yes
# tracking-table-max-keys 1000000

# Redis 7+ settings
# Enable command introspection for monitoring
# enable-protected-configs no
# enable-debug-command no
# enable-module-command no

# Memory usage optimization
# Use jemalloc for better memory management
# export MALLOC=jemalloc

# OS-level optimizations (to be set in docker-compose or systemd)
# vm.overcommit_memory = 1
# net.core.somaxconn = 65535
# net.ipv4.tcp_max_syn_backlog = 65535

# Specific optimizations for Selextract Cloud use cases:

# 1. Celery Task Queue Optimization
# - Use Redis as broker and result backend
# - Optimize for high-frequency enqueue/dequeue operations
# - Enable persistence for task durability

# 2. Session Storage Optimization  
# - Store user sessions with appropriate TTL
# - Use hash data structures for session data
# - Enable LRU eviction for session cleanup

# 3. API Response Caching
# - Cache frequently accessed data
# - Use appropriate TTL values
# - Enable compression for large responses

# 4. Real-time Features
# - Use pub/sub for WebSocket notifications
# - Optimize for low-latency message delivery
# - Handle connection spikes gracefully

# Example Celery configuration for optimal performance:
# BROKER_URL = 'redis://redis:6379/0'
# CELERY_RESULT_BACKEND = 'redis://redis:6379/1'
# CELERY_TASK_SERIALIZER = 'json'
# CELERY_RESULT_SERIALIZER = 'json'
# CELERY_ACCEPT_CONTENT = ['json']
# CELERY_TIMEZONE = 'UTC'
# CELERY_ENABLE_UTC = True
# CELERY_TASK_COMPRESSION = 'gzip'
# CELERY_RESULT_COMPRESSION = 'gzip'

# Example session configuration:
# SESSION_ENGINE = 'redis'
# SESSION_REDIS_HOST = 'redis'
# SESSION_REDIS_PORT = 6379
# SESSION_REDIS_DB = 2
# SESSION_COOKIE_AGE = 3600  # 1 hour

# Example caching configuration:
# CACHE_TYPE = 'redis'
# CACHE_REDIS_HOST = 'redis'
# CACHE_REDIS_PORT = 6379
# CACHE_REDIS_DB = 3
# CACHE_DEFAULT_TIMEOUT = 300  # 5 minutes